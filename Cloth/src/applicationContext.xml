<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
     xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 开启注解模式 -->
    <mvc:annotation-driven/>
    <!-- 指定需要扫面的包 -->
   	<context:component-scan base-package="com.cloth"/>
   	<!-- 图片验证码 -->
   	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">yes</prop>
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <prop key="kaptcha.textproducer.font.size">30</prop>
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.image.width">110</prop>
                        <prop key="kaptcha.image.height">35</prop>
                        <prop key="kaptcha.session.key">valicode</prop>
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                         <!-- <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop> -->
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
  <!-- 配置容器 -->
  <!-- 配置数据源 -->
  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
  <property name="driverClass" value="com.mysql.jdbc.Driver"/>
  <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"/><!-- ?useUnicode=true&amp;characterEncoding=UTF-8 -->
    	<property name="user" value="root"/>
    	<property name="password" value="123456"/>
  </bean>
  <!-- spring mvc中配置一个全局的拦截器栈（链） -->
		<mvc:interceptors>
			<!-- 配置一个完整的拦截器,按照配置顺序执行 -->
			<mvc:interceptor>
				<!-- 拦截要拦截的请求路径:/*:只拦截项目根目录的第一级请求；/**：拦截项目根目录及其子目录的请求 -->
				<mvc:mapping path="/**"/>
				<!-- 拦截器的实现类 -->
				<bean class="com.cloth.interceptor.UserLoginInterceptor"/>
			</mvc:interceptor>
		
		</mvc:interceptors>
  
  <!-- 配置sessionFactory -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"/>
    	<!-- 将实体包中的所有类添加到注解容器中 -->
    	<property name="packagesToScan">
    		<list>
    			<value>com.cloth.entity</value>
    		</list>
    	</property>
    	<!-- 配置hibernate的其他属性 -->
    	<property name="hibernateProperties">
    		<props>
    			<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
    			<prop key="hibernate.show_sql">true</prop>
    			<prop key="hibernate.format_sql">true</prop>
    			<prop key="hibernate.hbm2ddl.auto">update</prop>
    		</props>
    	</property>
    </bean>
    <!-- 多媒体 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    <property name="maxUploadSize" value="10485760" />  
</bean>
  <!-- 事物配置 -->
  <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
  	<!-- 为事管理其注入sessionFactory -->
  	<property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <!-- 注解实现事物~ -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> 
</beans>
